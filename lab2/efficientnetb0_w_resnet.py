# -*- coding: utf-8 -*-
"""EfficientNetB0_w/resnet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VzfBONlv-dUD-hxRr_i0DKGf2Zeek9vL
"""

# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 2.x
import tensorflow as tf
device_name = tf.test.gpu_device_name()
if device_name != '/device:GPU:0':
  raise SystemError('GPU device not found')
print('Found GPU at: {}'.format(device_name))

!pip install opendatasets --upgrade --quiet
import opendatasets as od
import os
import tensorflow as tf

dataset_url = 'https://www.kaggle.com/virtualdvid/oregon-wildlife'
od.download(dataset_url)

data_dir = './oregon-wildlife/oregon_wildlife/oregon_wildlife'
print(os.listdir(data_dir))

os.makedirs('./logs')

def clear_data(root):
    for folder_name in os.listdir(root):
        for file_name in os.listdir(root+'/'+folder_name):
            base_name, ext = os.path.splitext(file_name)
            if ext != '.jpg':
                os.remove(root+'/'+folder_name+'/'+file_name)
clear_data(data_dir)

log_dir = './logs'
batch_size = 128
img_size = 224
num_classes = 20

train_ds = tf.keras.preprocessing.image_dataset_from_directory(data_dir, labels='inferred',
            color_mode='rgb', batch_size=batch_size, image_size=(img_size, img_size),
            shuffle=True, seed=41, validation_split=0.3, subset='training')
valid_ds = tf.keras.preprocessing.image_dataset_from_directory(data_dir, labels='inferred',
            color_mode='rgb', batch_size=batch_size, image_size=(img_size, img_size),
            shuffle=True, seed=41, validation_split=0.3, subset='validation')

def input_preprocess(image, label):
    label = tf.one_hot(label, num_classes)
    return image, label


train_ds = train_ds.map(
    input_preprocess, num_parallel_calls=tf.data.experimental.AUTOTUNE
)
train_ds = train_ds.prefetch(tf.data.experimental.AUTOTUNE)

valid_ds = valid_ds.map(input_preprocess)

def build_model():
    inputs = tf.keras.Input(shape=(img_size, img_size, 3))
    model = tf.keras.applications.EfficientNetB0(input_tensor=inputs, include_top=False, weights="imagenet")
    model.trainable = False
    x = tf.keras.layers.GlobalAveragePooling2D()(model.output)
    outputs = tf.keras.layers.Dense(num_classes, activation=tf.keras.activations.softmax)(x)
    model = tf.keras.Model(inputs, outputs, name="EfficientNet")
    model.compile(
        optimizer=tf.optimizers.Adam(0.001),
        loss=tf.keras.losses.categorical_crossentropy,
        metrics=[tf.keras.metrics.categorical_accuracy],
    )
    return model

model = build_model()
    
model.fit(
    train_ds,
    epochs=50,
    validation_data=valid_ds,
    callbacks=[
        tf.keras.callbacks.TensorBoard(log_dir),
    ]
  )

